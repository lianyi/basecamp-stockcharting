{"version":3,"sources":["api/stock/stock.controller.js"],"names":["index","show","showFromWeb","create","upsert","patch","destroy","quandlapi","require","respondWithResult","res","statusCode","entity","status","json","patchUpdates","patches","apply","err","reject","save","removeEntity","remove","then","end","handleEntityNotFound","handleError","send","req","find","exec","catch","findById","params","id","getStockData","body","name","getStockMeta","data","_id","findOneAndUpdate","setDefaultsOnInsert","runValidators","findOne","code"],"mappings":"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","file":"stock.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/stocks              ->  index\n * POST    /api/stocks              ->  create\n * GET     /api/stocks/:id          ->  show\n * PUT     /api/stocks/:id          ->  upsert\n * PATCH   /api/stocks/:id          ->  patch\n * DELETE  /api/stocks/:id          ->  destroy\n */\n\n'use strict';\n\nimport jsonpatch from 'fast-json-patch';\nimport Stock from './stock.model';\nconst quandlapi = require('./quandlapi');\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function (entity) {\n    if (entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function (entity) {\n    try {\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function (entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          return res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function (entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function (err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Stocks\nexport function index(req, res) {\n  return Stock.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Stock from the DB\nexport function show(req, res) {\n  return Stock.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Stock from the Web\nexport function showFromWeb(req, res) {\n  return quandlapi.getStockData(req.params.id)\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n// Creates a new Stock in the DB\nexport function create(req, res) {\n  if (!req.body.name) {\n    return res.status(400).json('name is a required parameter');\n  }\n  quandlapi.getStockMeta(req.body.name).then((data) =>\n    Stock.create(data)\n      .then(respondWithResult(res, 201))\n      .catch(handleError(res))\n  ).catch(handleError(res));\n}\n\n// Upserts the given Stock in the DB at the specified ID\nexport function upsert(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return Stock.findOneAndUpdate({_id: req.params.id}, req.body, {\n    upsert: true,\n    setDefaultsOnInsert: true,\n    runValidators: true\n  }).exec()\n\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing Stock in the DB\nexport function patch(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return Stock.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Stock from the DB\nexport function destroy(req, res) {\n  return Stock.findOne({code: req.params.id}).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}